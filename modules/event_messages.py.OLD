import hikari
import tanjun
import toolbox
import requests
import base64
import os
import pymongo
import pymongo.errors
from time import gmtime, strftime
from datetime import datetime
from time import sleep
import sentry_sdk
from loguru import logger

try:
    component = tanjun.Component()

    sentry_sdk.init(os.getenv("SENTRY"))
    mongoURL = "mongodb+srv://{}:{}@{}/{}?retryWrites=true&w=majority".format(os.getenv("MONGO_USER"), os.getenv("MONGO_PASSWD"), os.getenv("MONGO_CLUSTER"), os.getenv("MONGO_DB"))
    mongoClient = pymongo.MongoClient(mongoURL)

    if os.getenv("ENV") == "DEV":
        mongoMemberLogsCollection = mongoClient["TheGreatBot"]["beta_tgbMessages"]
        mongoMembersCollection = mongoClient["TheGreatBot"]["beta_tgbMembers"]
    else:
        mongoMemberLogsCollection = mongoClient["TheGreatBot"]["tgbMessages"]
        mongoMembersCollection = mongoClient["TheGreatBot"]["tgbMembers"]


    @component.with_listener()
    async def getTextMessage(event: hikari.GuildMessageCreateEvent, bot: hikari.GatewayBot = tanjun.injected(type=hikari.GatewayBot)) -> None:
        try:
            if not event.message.author.is_bot:
                try:
                    messageTime = datetime.strptime(datetime.now().isoformat(), "%Y-%m-%dT%H:%M:%S.%f")
                    messageID = event.message.id
                    messageContent = event.message.content
                    messageChannel = str(await bot.rest.fetch_channel(event.message.channel_id))
                    messageAuthor = event.message.author.username
                    messageObject = await bot.rest.fetch_message(event.message.channel_id, event.message.id)
                    if messageObject.attachments:
                        messageMediaList = []
                        for attachment in messageObject.attachments:
                            attachmentURL = attachment.url
                            messageMedia = base64.b64encode(requests.get(attachmentURL).content).decode("utf-8")
                            messageMediaList.append(messageMedia)
                        mongoUChannelsDict = {"Author": messageAuthor, "Message": messageContent, "MessageID": messageID, "Channel": messageChannel, "Time": messageTime, "Media": messageMediaList, "Deleted": False, "Updated": False}
                    else:
                        mongoUChannelsDict = {"Author": messageAuthor, "Message": messageContent, "MessageID": messageID, "Channel": messageChannel, "Time": messageTime, "Deleted": False, "Updated": False}
                    try:
                        mongoMemberLogsCollection.insert_one(mongoUChannelsDict)
                    except pymongo.errors.DocumentTooLarge:
                        mongoUChannelsDict = {"Author": messageAuthor, "Message": messageContent, "MessageID": messageID, "Channel": messageChannel, "Time": messageTime, "Media": ["List Emptied for being too large"], "Deleted": False, "Updated": False}
                        mongoMemberLogsCollection.insert_one(mongoUChannelsDict)
                    except Exception as e:
                        if os.getenv("ENV") == "PROD":
                            sentry_sdk.capture_exception(e)
                        else:
                            logger.error("Error while trying to insert new Message in MongoDB with error : ", e)
                            print("Error while trying to insert new Message in MongoDB with error : ", e)
                except Exception as e:
                    if os.getenv("ENV") == "PROD":
                        sentry_sdk.capture_exception(e)
                    else:
                        logger.error("Error while trying to get message content with error : ", e)
                        print("Error while trying to get message content with error : ", e)
                try:
                    query = {"memberID": event.message.author.id}
                    memberDocument = mongoMembersCollection.find_one(query)
                    if memberDocument is None:
                        query = {"memberID": event.message.author.id, "memberUsername": event.message.author.username,
                                 "memberNickname": event.message.author.global_name, "memberOldNicknames": [],
                                 "messagesSent": 1, "JoinedAt": event.member.joined_at}
                        mongoMembersCollection.insert_one(query)
                    else:
                        if not "messagesSent" in memberDocument:
                            messagesSent = 1
                            query = {"memberID": event.message.author.id}
                            newValue = {"$set": {"messagesSent": messagesSent}}
                            mongoMembersCollection.update_one(query, newValue)
                        else:
                            messagesSent = memberDocument["messagesSent"]
                            messagesSent += 1
                            query = {"memberID": event.message.author.id}
                            newValue = {"$set": {"messagesSent": messagesSent}}
                            mongoMembersCollection.update_one(query, newValue)
                except Exception as e:
                    if os.getenv("ENV") == "PROD":
                        sentry_sdk.capture_exception(e)
                    else:
                        logger.error("Error while trying to update message count with error : ", e)
                        print("Error while trying to update message count with error : ", e)
        except Exception as e:
            if os.getenv("ENV") == "PROD":
                sentry_sdk.capture_exception(e)
            else:
                logger.error("Error while trying to get message content with error : ", e)
                print("Error while trying to get message content with error : ", e)
                print(event.message)


    @component.with_listener()
    async def getUpdatedMessage(event: hikari.GuildMessageUpdateEvent, bot: hikari.GatewayBot = tanjun.injected(type=hikari.GatewayBot)) -> None:
        try:
            if event.message.author:
                if not event.message.author.is_bot:
                    try:
                        messageTime = datetime.strptime(datetime.now().isoformat(), "%Y-%m-%dT%H:%M:%S.%f")
                        messageID = event.message.id
                        messageContent = event.message.content
                        messageChannel = str(await bot.rest.fetch_channel(bot.cache.get_guild_channel(event.message.channel_id)))
                        messageAuthor = event.message.author.username
                        messageObject = await bot.rest.fetch_message(event.message.channel_id, event.message.id)
                        if messageObject.attachments:
                            messageMediaList = []
                            for attachment in messageObject.attachments:
                                attachmentURL = attachment.url
                                messageMedia = base64.b64encode(requests.get(attachmentURL).content).decode("utf-8")
                                messageMediaList.append(messageMedia)
                            mongoUChannelsDict = {"Author": messageAuthor, "Message": messageContent, "MessageID": messageID,
                                                  "Channel": messageChannel, "Time": messageTime, "Media": messageMediaList, "Deleted": False, "Updated": True}
                        else:
                            mongoUChannelsDict = {"Author": messageAuthor, "Message": messageContent, "MessageID": messageID,
                                                  "Channel": messageChannel, "Time": messageTime, "Deleted": False, "Updated": True}
                        try:
                            mongoMemberLogsCollection.insert_one(mongoUChannelsDict)
                            # print("New Message inserted in MongoDB with data : ", mongoUChannelsDict)
                        except Exception as e:
                            logger.error("Error while trying to insert new Message in MongoDB with error : ", e)
                    except Exception as e:
                        logger.error("Error while trying to get message content with error : ", e, "\n and Message Informations: ", event.message.author, event.message.content, event.message.id, event.message.channel_id, event.message.attachments)
        except Exception as e:
            if os.getenv("ENV") == "PROD":
                sentry_sdk.capture_exception(e)
            else:
                print("Error while trying to get message content with error : ", e)
                print(event.message)


    @component.with_listener()
    async def getDeletedMessage(event: hikari.GuildMessageDeleteEvent) -> None:
        messageID = event.message_id
        query = {"MessageID": messageID}
        mongoMemberLogsCollection.update_many(query, {"$set": {"Deleted": True}})
        document = mongoMemberLogsCollection.find_one({"MessageID": messageID})
        try:
            memberDocument = mongoMembersCollection.find_one({"memberUsername": document["Author"]})
        except NoneTypeError:
            memberDocument = None
        if memberDocument is not None:
            if "messagesSent" not in memberDocument:
                messagesSent = 1
                query = {"memberUsername": document["Author"]}
                newValue = {"$set": {"messagesSent": messagesSent}}
                mongoMembersCollection.update_one(query, newValue)
            else:
                messagesSent = memberDocument["messagesSent"]
                messagesSent -= 1
                query = {"memberUsername": document["Author"]}
                newValue = {"$set": {"messagesSent": messagesSent}}
                mongoMembersCollection.update_one(query, newValue)


    component = component.make_loader()

except Exception as e:
    if os.getenv("ENV") == "DEV":
        print("Error loading module event_messages.py with error : ", e)
    else:
        sentry_sdk.capture_exception(e)
